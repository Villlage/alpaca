{"ast":null,"code":"export default function buildStyles({\n  rotation,\n  strokeLinecap,\n  textColor,\n  textSize,\n  pathColor,\n  pathTransition,\n  pathTransitionDuration,\n  trailColor,\n  backgroundColor\n}) {\n  const rotationTransform = rotation == null ? undefined : `rotate(${rotation}turn)`;\n  const rotationTransformOrigin = rotation == null ? undefined : 'center center';\n  return {\n    root: {},\n    path: removeUndefinedValues({\n      stroke: pathColor,\n      strokeLinecap: strokeLinecap,\n      transform: rotationTransform,\n      transformOrigin: rotationTransformOrigin,\n      transition: pathTransition,\n      transitionDuration: pathTransitionDuration == null ? undefined : `${pathTransitionDuration}s`\n    }),\n    trail: removeUndefinedValues({\n      stroke: trailColor,\n      strokeLinecap: strokeLinecap,\n      transform: rotationTransform,\n      transformOrigin: rotationTransformOrigin\n    }),\n    text: removeUndefinedValues({\n      fill: textColor,\n      fontSize: textSize\n    }),\n    background: removeUndefinedValues({\n      fill: backgroundColor\n    })\n  };\n}\n\nfunction removeUndefinedValues(obj) {\n  Object.keys(obj).forEach(key => {\n    if (obj[key] == null) {\n      delete obj[key];\n    }\n  });\n  return obj;\n}","map":{"version":3,"sources":["/Users/gilad/code/commitmuse/client/src/app/components/CircularProgressbar/buildStyles.ts"],"names":["buildStyles","rotation","strokeLinecap","textColor","textSize","pathColor","pathTransition","pathTransitionDuration","trailColor","backgroundColor","rotationTransform","undefined","rotationTransformOrigin","root","path","removeUndefinedValues","stroke","transform","transformOrigin","transition","transitionDuration","trail","text","fill","fontSize","background","obj","Object","keys","forEach","key"],"mappings":"AAEA,eAAe,SAASA,WAAT,CAAqB;AAClCC,EAAAA,QADkC;AAElCC,EAAAA,aAFkC;AAGlCC,EAAAA,SAHkC;AAIlCC,EAAAA,QAJkC;AAKlCC,EAAAA,SALkC;AAMlCC,EAAAA,cANkC;AAOlCC,EAAAA,sBAPkC;AAQlCC,EAAAA,UARkC;AASlCC,EAAAA;AATkC,CAArB,EAoBe;AAC5B,QAAMC,iBAAiB,GAAGT,QAAQ,IAAI,IAAZ,GAAmBU,SAAnB,GAAgC,UAASV,QAAS,OAA5E;AACA,QAAMW,uBAAuB,GAAGX,QAAQ,IAAI,IAAZ,GAAmBU,SAAnB,GAA+B,eAA/D;AAEA,SAAO;AACLE,IAAAA,IAAI,EAAE,EADD;AAELC,IAAAA,IAAI,EAAEC,qBAAqB,CAAC;AAC1BC,MAAAA,MAAM,EAAEX,SADkB;AAE1BH,MAAAA,aAAa,EAAEA,aAFW;AAG1Be,MAAAA,SAAS,EAAEP,iBAHe;AAI1BQ,MAAAA,eAAe,EAAEN,uBAJS;AAK1BO,MAAAA,UAAU,EAAEb,cALc;AAM1Bc,MAAAA,kBAAkB,EAAEb,sBAAsB,IAAI,IAA1B,GAAiCI,SAAjC,GAA8C,GAAEJ,sBAAuB;AANjE,KAAD,CAFtB;AAULc,IAAAA,KAAK,EAAEN,qBAAqB,CAAC;AAC3BC,MAAAA,MAAM,EAAER,UADmB;AAE3BN,MAAAA,aAAa,EAAEA,aAFY;AAG3Be,MAAAA,SAAS,EAAEP,iBAHgB;AAI3BQ,MAAAA,eAAe,EAAEN;AAJU,KAAD,CAVvB;AAgBLU,IAAAA,IAAI,EAAEP,qBAAqB,CAAC;AAC1BQ,MAAAA,IAAI,EAAEpB,SADoB;AAE1BqB,MAAAA,QAAQ,EAAEpB;AAFgB,KAAD,CAhBtB;AAoBLqB,IAAAA,UAAU,EAAEV,qBAAqB,CAAC;AAChCQ,MAAAA,IAAI,EAAEd;AAD0B,KAAD;AApB5B,GAAP;AAwBD;;AAED,SAASM,qBAAT,CAA+BW,GAA/B,EAA4D;AAC1DC,EAAAA,MAAM,CAACC,IAAP,CAAYF,GAAZ,EAAiBG,OAAjB,CAA0BC,GAAD,IAAiB;AACxC,QAAIJ,GAAG,CAACI,GAAD,CAAH,IAAY,IAAhB,EAAsB;AACpB,aAAOJ,GAAG,CAACI,GAAD,CAAV;AACD;AACF,GAJD;AAKA,SAAOJ,GAAP;AACD","sourcesContent":["import { CircularProgressbarStyles } from './types'\n\nexport default function buildStyles({\n  rotation,\n  strokeLinecap,\n  textColor,\n  textSize,\n  pathColor,\n  pathTransition,\n  pathTransitionDuration,\n  trailColor,\n  backgroundColor,\n}: {\n  rotation?: number // Number of turns, 0-1\n  strokeLinecap?: any\n  textColor?: string\n  textSize?: string | number\n  pathColor?: string\n  pathTransition?: string\n  pathTransitionDuration?: number // Measured in seconds\n  trailColor?: string\n  backgroundColor?: string\n}): CircularProgressbarStyles {\n  const rotationTransform = rotation == null ? undefined : `rotate(${rotation}turn)`\n  const rotationTransformOrigin = rotation == null ? undefined : 'center center'\n\n  return {\n    root: {},\n    path: removeUndefinedValues({\n      stroke: pathColor,\n      strokeLinecap: strokeLinecap,\n      transform: rotationTransform,\n      transformOrigin: rotationTransformOrigin,\n      transition: pathTransition,\n      transitionDuration: pathTransitionDuration == null ? undefined : `${pathTransitionDuration}s`,\n    }),\n    trail: removeUndefinedValues({\n      stroke: trailColor,\n      strokeLinecap: strokeLinecap,\n      transform: rotationTransform,\n      transformOrigin: rotationTransformOrigin,\n    }),\n    text: removeUndefinedValues({\n      fill: textColor,\n      fontSize: textSize,\n    }),\n    background: removeUndefinedValues({\n      fill: backgroundColor,\n    }),\n  }\n}\n\nfunction removeUndefinedValues(obj: { [key: string]: any }) {\n  Object.keys(obj).forEach((key: string) => {\n    if (obj[key] == null) {\n      delete obj[key]\n    }\n  })\n  return obj\n}\n"]},"metadata":{},"sourceType":"module"}