{"ast":null,"code":"import _regeneratorRuntime from\"/Users/gilad/code/commitmuse/client/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/gilad/code/commitmuse/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/Users/gilad/code/commitmuse/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/gilad/code/commitmuse/client/node_modules/@babel/runtime/helpers/esm/createClass\";import BaseService from'./base.service';var baseService=new BaseService();var PlaidService=/*#__PURE__*/function(){function PlaidService(){_classCallCheck(this,PlaidService);}_createClass(PlaidService,[{key:\"getToken\",value:function(){var _getToken=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return baseService.getJSON('plaid/link-token');case 2:return _context.abrupt(\"return\",_context.sent);case 3:case\"end\":return _context.stop();}}},_callee);}));function getToken(){return _getToken.apply(this,arguments);}return getToken;}()},{key:\"createItem\",value:function(){var _createItem=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(token,meta){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return baseService.postJSON('plaid/items',{public_token:token,metadata:meta});case 2:return _context2.abrupt(\"return\",_context2.sent);case 3:case\"end\":return _context2.stop();}}},_callee2);}));function createItem(_x,_x2){return _createItem.apply(this,arguments);}return createItem;}()},{key:\"createCompanyItem\",value:function(){var _createCompanyItem=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(token,meta,companyId){return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return baseService.postJSON(\"plaid/items?company_id=\".concat(companyId),{public_token:token,metadata:meta,company_id:companyId});case 2:return _context3.abrupt(\"return\",_context3.sent);case 3:case\"end\":return _context3.stop();}}},_callee3);}));function createCompanyItem(_x3,_x4,_x5){return _createCompanyItem.apply(this,arguments);}return createCompanyItem;}()},{key:\"getMask\",value:function(){var _getMask=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(companyId){return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return baseService.getJSON(\"plaid/items?company_id=\".concat(companyId));case 2:return _context4.abrupt(\"return\",_context4.sent);case 3:case\"end\":return _context4.stop();}}},_callee4);}));function getMask(_x6){return _getMask.apply(this,arguments);}return getMask;}()}]);return PlaidService;}();export{PlaidService as default};","map":{"version":3,"sources":["/Users/gilad/code/commitmuse/client/src/services/plaid.service.ts"],"names":["BaseService","baseService","PlaidService","getJSON","token","meta","postJSON","public_token","metadata","companyId","company_id"],"mappings":"mdAAA,MAAOA,CAAAA,WAAP,KAAwB,gBAAxB,CAGA,GAAMC,CAAAA,WAAW,CAAG,GAAID,CAAAA,WAAJ,EAApB,C,GAEqBE,CAAAA,Y,gXAEJD,CAAAA,WAAW,CAACE,OAAZ,CAAoB,kBAApB,C,8TAGSC,K,CAAeC,I,6IACxBJ,CAAAA,WAAW,CAACK,QAAZ,CAAqB,aAArB,CAAoC,CAC/CC,YAAY,CAAEH,KADiC,CAE/CI,QAAQ,CAAEH,IAFqC,CAApC,C,4VAMgBD,K,CAAeC,I,CAAqBI,S,6IACpDR,CAAAA,WAAW,CAACK,QAAZ,kCAA+CG,SAA/C,EAA4D,CACvEF,YAAY,CAAEH,KADyD,CAEvEI,QAAQ,CAAEH,IAF6D,CAGvEK,UAAU,CAAED,SAH2D,CAA5D,C,kWAOMA,S,6IACNR,CAAAA,WAAW,CAACE,OAAZ,kCAA8CM,SAA9C,E,sOArBIP,Y","sourcesContent":["import BaseService from './base.service'\nimport { PlaidMetadata } from '../interfaces/baseIntefaces'\n\nconst baseService = new BaseService()\n\nexport default class PlaidService {\n  public async getToken() {\n    return await baseService.getJSON('plaid/link-token')\n  }\n\n  public async createItem(token: string, meta: PlaidMetadata) {\n    return await baseService.postJSON('plaid/items', {\n      public_token: token,\n      metadata: meta,\n    })\n  }\n\n  public async createCompanyItem(token: string, meta: PlaidMetadata, companyId: number | string) {\n    return await baseService.postJSON(`plaid/items?company_id=${companyId}`, {\n      public_token: token,\n      metadata: meta,\n      company_id: companyId,\n    })\n  }\n\n  public async getMask(companyId: string | number) {\n    return await baseService.getJSON(`plaid/items?company_id=${companyId}`)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}