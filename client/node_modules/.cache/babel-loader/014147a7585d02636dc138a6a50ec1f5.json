{"ast":null,"code":"var _jsxFileName = \"/Users/gilad/code/commitmuse/client/src/app/components/CircularProgressbar/CircularProgressbar.tsx\";\nimport * as React from 'react';\nimport './style.scss';\nimport { VIEWBOX_WIDTH, VIEWBOX_HEIGHT, VIEWBOX_HEIGHT_HALF, VIEWBOX_CENTER_X, VIEWBOX_CENTER_Y } from './constants';\nimport Path from './Path';\nimport styled from 'styled-components';\nexport default class CircularProgressbar extends React.Component {\n  getPathRadius() {\n    // The radius of the path is defined to be in the middle, so in order for the path to\n    // fit perfectly inside the 100x100 viewBox, need to subtract half the strokeWidth\n    return VIEWBOX_HEIGHT_HALF - this.props.strokeWidth / 2;\n  } // Ratio of path length to trail length, as a value between 0 and 1\n\n\n  getPathRatio() {\n    const {\n      value,\n      minValue,\n      maxValue\n    } = this.props;\n    const boundedValue = Math.min(Math.max(value, minValue), maxValue);\n    return (boundedValue - minValue) / (maxValue - minValue);\n  }\n\n  render() {\n    const {\n      circleRatio,\n      className,\n      classes,\n      counterClockwise,\n      styles,\n      strokeWidth,\n      text\n    } = this.props;\n    const pathRadius = this.getPathRadius();\n    const pathRatio = this.getPathRatio();\n    const Svg = styled.svg`\n      .CircularProgressbar-path {\n        stroke: ${this.props.lineColor};\n      }\n      .CircularProgressbar-text {\n        fill: ${this.props.textColor};\n      }\n    `;\n    return /*#__PURE__*/React.createElement(Svg, {\n      className: `${classes.root} ${className}`,\n      style: styles.root,\n      viewBox: `0 0 ${VIEWBOX_WIDTH} ${VIEWBOX_HEIGHT}`,\n      \"data-test-id\": \"CircularProgressbar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Path, {\n      className: classes.trail,\n      counterClockwise: counterClockwise,\n      dashRatio: circleRatio,\n      pathRadius: pathRadius,\n      strokeWidth: strokeWidth,\n      style: styles.trail,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Path, {\n      className: classes.path,\n      counterClockwise: counterClockwise,\n      dashRatio: pathRatio * circleRatio,\n      pathRadius: pathRadius,\n      strokeWidth: strokeWidth,\n      style: styles.path,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }), text ? /*#__PURE__*/React.createElement(\"text\", {\n      className: classes.text,\n      style: styles.text,\n      x: VIEWBOX_CENTER_X,\n      y: VIEWBOX_CENTER_Y,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }\n    }, text) : null);\n  }\n\n}\nCircularProgressbar.defaultProps = {\n  textColor: '#3e98c7',\n  lineColor: '#3e98c7',\n  backgroundPadding: 0,\n  circleRatio: 1,\n  classes: {\n    root: 'CircularProgressbar',\n    trail: 'CircularProgressbar-trail',\n    path: 'CircularProgressbar-path',\n    text: 'CircularProgressbar-text',\n    background: 'CircularProgressbar-background'\n  },\n  counterClockwise: false,\n  className: '',\n  maxValue: 100,\n  minValue: 0,\n  strokeWidth: 4,\n  styles: {\n    root: {},\n    trail: {},\n    path: {},\n    text: {},\n    background: {}\n  },\n  text: ''\n};","map":{"version":3,"sources":["/Users/gilad/code/commitmuse/client/src/app/components/CircularProgressbar/CircularProgressbar.tsx"],"names":["React","VIEWBOX_WIDTH","VIEWBOX_HEIGHT","VIEWBOX_HEIGHT_HALF","VIEWBOX_CENTER_X","VIEWBOX_CENTER_Y","Path","styled","CircularProgressbar","Component","getPathRadius","props","strokeWidth","getPathRatio","value","minValue","maxValue","boundedValue","Math","min","max","render","circleRatio","className","classes","counterClockwise","styles","text","pathRadius","pathRatio","Svg","svg","lineColor","textColor","root","trail","path","defaultProps","backgroundPadding","background"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport './style.scss'\nimport { VIEWBOX_WIDTH, VIEWBOX_HEIGHT, VIEWBOX_HEIGHT_HALF, VIEWBOX_CENTER_X, VIEWBOX_CENTER_Y } from './constants'\nimport Path from './Path'\nimport { CircularProgressbarDefaultProps, CircularProgressbarProps } from './types'\nimport styled from 'styled-components'\n\nexport default class CircularProgressbar extends React.Component<CircularProgressbarProps> {\n  static defaultProps: CircularProgressbarDefaultProps = {\n    textColor: '#3e98c7',\n    lineColor: '#3e98c7',\n    backgroundPadding: 0,\n    circleRatio: 1,\n    classes: {\n      root: 'CircularProgressbar',\n      trail: 'CircularProgressbar-trail',\n      path: 'CircularProgressbar-path',\n      text: 'CircularProgressbar-text',\n      background: 'CircularProgressbar-background',\n    },\n    counterClockwise: false,\n    className: '',\n    maxValue: 100,\n    minValue: 0,\n    strokeWidth: 4,\n    styles: {\n      root: {},\n      trail: {},\n      path: {},\n      text: {},\n      background: {},\n    },\n    text: '',\n  }\n\n  getPathRadius() {\n    // The radius of the path is defined to be in the middle, so in order for the path to\n    // fit perfectly inside the 100x100 viewBox, need to subtract half the strokeWidth\n    return VIEWBOX_HEIGHT_HALF - this.props.strokeWidth / 2\n  }\n\n  // Ratio of path length to trail length, as a value between 0 and 1\n  getPathRatio() {\n    const { value, minValue, maxValue } = this.props\n    const boundedValue = Math.min(Math.max(value, minValue), maxValue)\n    return (boundedValue - minValue) / (maxValue - minValue)\n  }\n\n  render() {\n    const { circleRatio, className, classes, counterClockwise, styles, strokeWidth, text } = this.props\n\n    const pathRadius = this.getPathRadius()\n    const pathRatio = this.getPathRatio()\n\n    const Svg = styled.svg`\n      .CircularProgressbar-path {\n        stroke: ${this.props.lineColor};\n      }\n      .CircularProgressbar-text {\n        fill: ${this.props.textColor};\n      }\n    `\n\n    return (\n      <Svg\n        className={`${classes.root} ${className}`}\n        style={styles.root}\n        viewBox={`0 0 ${VIEWBOX_WIDTH} ${VIEWBOX_HEIGHT}`}\n        data-test-id=\"CircularProgressbar\"\n      >\n        <Path\n          className={classes.trail}\n          counterClockwise={counterClockwise}\n          dashRatio={circleRatio}\n          pathRadius={pathRadius}\n          strokeWidth={strokeWidth}\n          style={styles.trail}\n        />\n\n        <Path\n          className={classes.path}\n          counterClockwise={counterClockwise}\n          dashRatio={pathRatio * circleRatio}\n          pathRadius={pathRadius}\n          strokeWidth={strokeWidth}\n          style={styles.path}\n        />\n\n        {text ? (\n          <text className={classes.text} style={styles.text} x={VIEWBOX_CENTER_X} y={VIEWBOX_CENTER_Y}>\n            {text}\n          </text>\n        ) : null}\n      </Svg>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}