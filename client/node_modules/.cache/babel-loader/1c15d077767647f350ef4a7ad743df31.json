{"ast":null,"code":"import _taggedTemplateLiteral from\"/Users/gilad/code/commitmuse/client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";import _classCallCheck from\"/Users/gilad/code/commitmuse/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/gilad/code/commitmuse/client/node_modules/@babel/runtime/helpers/esm/createClass\";import _createSuper from\"/Users/gilad/code/commitmuse/client/node_modules/@babel/runtime/helpers/esm/createSuper\";import _inherits from\"/Users/gilad/code/commitmuse/client/node_modules/@babel/runtime/helpers/esm/inherits\";function _templateObject(){var data=_taggedTemplateLiteral([\"\\n      .CircularProgressbar-path {\\n        stroke: \",\";\\n      }\\n      .CircularProgressbar-text {\\n        fill: \",\";\\n      }\\n    \"]);_templateObject=function _templateObject(){return data;};return data;}import*as React from'react';import'./style.scss';import{VIEWBOX_WIDTH,VIEWBOX_HEIGHT,VIEWBOX_HEIGHT_HALF,VIEWBOX_CENTER_X,VIEWBOX_CENTER_Y}from'./constants';import Path from'./Path';import styled from'styled-components';var CircularProgressbar=/*#__PURE__*/function(_React$Component){_inherits(CircularProgressbar,_React$Component);var _super=_createSuper(CircularProgressbar);function CircularProgressbar(){_classCallCheck(this,CircularProgressbar);return _super.apply(this,arguments);}_createClass(CircularProgressbar,[{key:\"getPathRadius\",value:function getPathRadius(){// The radius of the path is defined to be in the middle, so in order for the path to\n// fit perfectly inside the 100x100 viewBox, need to subtract half the strokeWidth\nreturn VIEWBOX_HEIGHT_HALF-this.props.strokeWidth/2;}// Ratio of path length to trail length, as a value between 0 and 1\n},{key:\"getPathRatio\",value:function getPathRatio(){var _this$props=this.props,value=_this$props.value,minValue=_this$props.minValue,maxValue=_this$props.maxValue;var boundedValue=Math.min(Math.max(value,minValue),maxValue);return(boundedValue-minValue)/(maxValue-minValue);}},{key:\"render\",value:function render(){var _this$props2=this.props,circleRatio=_this$props2.circleRatio,className=_this$props2.className,classes=_this$props2.classes,counterClockwise=_this$props2.counterClockwise,styles=_this$props2.styles,strokeWidth=_this$props2.strokeWidth,text=_this$props2.text;var pathRadius=this.getPathRadius();var pathRatio=this.getPathRatio();var Svg=styled.svg(_templateObject(),this.props.lineColor,this.props.textColor);return/*#__PURE__*/React.createElement(Svg,{className:\"\".concat(classes.root,\" \").concat(className),style:styles.root,viewBox:\"0 0 \".concat(VIEWBOX_WIDTH,\" \").concat(VIEWBOX_HEIGHT),\"data-test-id\":\"CircularProgressbar\"},/*#__PURE__*/React.createElement(Path,{className:classes.trail,counterClockwise:counterClockwise,dashRatio:circleRatio,pathRadius:pathRadius,strokeWidth:strokeWidth,style:styles.trail}),/*#__PURE__*/React.createElement(Path,{className:classes.path,counterClockwise:counterClockwise,dashRatio:pathRatio*circleRatio,pathRadius:pathRadius,strokeWidth:strokeWidth,style:styles.path}),text?/*#__PURE__*/React.createElement(\"text\",{className:classes.text,style:styles.text,x:VIEWBOX_CENTER_X,y:VIEWBOX_CENTER_Y},text):null);}}]);return CircularProgressbar;}(React.Component);CircularProgressbar.defaultProps={textColor:'#3e98c7',lineColor:'#3e98c7',backgroundPadding:0,circleRatio:1,classes:{root:'CircularProgressbar',trail:'CircularProgressbar-trail',path:'CircularProgressbar-path',text:'CircularProgressbar-text',background:'CircularProgressbar-background'},counterClockwise:false,className:'',maxValue:100,minValue:0,strokeWidth:4,styles:{root:{},trail:{},path:{},text:{},background:{}},text:''};export{CircularProgressbar as default};","map":{"version":3,"sources":["/Users/gilad/code/commitmuse/client/src/app/components/CircularProgressbar/CircularProgressbar.tsx"],"names":["React","VIEWBOX_WIDTH","VIEWBOX_HEIGHT","VIEWBOX_HEIGHT_HALF","VIEWBOX_CENTER_X","VIEWBOX_CENTER_Y","Path","styled","CircularProgressbar","props","strokeWidth","value","minValue","maxValue","boundedValue","Math","min","max","circleRatio","className","classes","counterClockwise","styles","text","pathRadius","getPathRadius","pathRatio","getPathRatio","Svg","svg","lineColor","textColor","root","trail","path","Component","defaultProps","backgroundPadding","background"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport './style.scss'\nimport { VIEWBOX_WIDTH, VIEWBOX_HEIGHT, VIEWBOX_HEIGHT_HALF, VIEWBOX_CENTER_X, VIEWBOX_CENTER_Y } from './constants'\nimport Path from './Path'\nimport { CircularProgressbarDefaultProps, CircularProgressbarProps } from './types'\nimport styled from 'styled-components'\n\nexport default class CircularProgressbar extends React.Component<CircularProgressbarProps> {\n  static defaultProps: CircularProgressbarDefaultProps = {\n    textColor: '#3e98c7',\n    lineColor: '#3e98c7',\n    backgroundPadding: 0,\n    circleRatio: 1,\n    classes: {\n      root: 'CircularProgressbar',\n      trail: 'CircularProgressbar-trail',\n      path: 'CircularProgressbar-path',\n      text: 'CircularProgressbar-text',\n      background: 'CircularProgressbar-background',\n    },\n    counterClockwise: false,\n    className: '',\n    maxValue: 100,\n    minValue: 0,\n    strokeWidth: 4,\n    styles: {\n      root: {},\n      trail: {},\n      path: {},\n      text: {},\n      background: {},\n    },\n    text: '',\n  }\n\n  getPathRadius() {\n    // The radius of the path is defined to be in the middle, so in order for the path to\n    // fit perfectly inside the 100x100 viewBox, need to subtract half the strokeWidth\n    return VIEWBOX_HEIGHT_HALF - this.props.strokeWidth / 2\n  }\n\n  // Ratio of path length to trail length, as a value between 0 and 1\n  getPathRatio() {\n    const { value, minValue, maxValue } = this.props\n    const boundedValue = Math.min(Math.max(value, minValue), maxValue)\n    return (boundedValue - minValue) / (maxValue - minValue)\n  }\n\n  render() {\n    const { circleRatio, className, classes, counterClockwise, styles, strokeWidth, text } = this.props\n\n    const pathRadius = this.getPathRadius()\n    const pathRatio = this.getPathRatio()\n\n    const Svg = styled.svg`\n      .CircularProgressbar-path {\n        stroke: ${this.props.lineColor};\n      }\n      .CircularProgressbar-text {\n        fill: ${this.props.textColor};\n      }\n    `\n\n    return (\n      <Svg\n        className={`${classes.root} ${className}`}\n        style={styles.root}\n        viewBox={`0 0 ${VIEWBOX_WIDTH} ${VIEWBOX_HEIGHT}`}\n        data-test-id=\"CircularProgressbar\"\n      >\n        <Path\n          className={classes.trail}\n          counterClockwise={counterClockwise}\n          dashRatio={circleRatio}\n          pathRadius={pathRadius}\n          strokeWidth={strokeWidth}\n          style={styles.trail}\n        />\n\n        <Path\n          className={classes.path}\n          counterClockwise={counterClockwise}\n          dashRatio={pathRatio * circleRatio}\n          pathRadius={pathRadius}\n          strokeWidth={strokeWidth}\n          style={styles.path}\n        />\n\n        {text ? (\n          <text className={classes.text} style={styles.text} x={VIEWBOX_CENTER_X} y={VIEWBOX_CENTER_Y}>\n            {text}\n          </text>\n        ) : null}\n      </Svg>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}