{"ast":null,"code":"import currentEnv from '../config/environment';\nimport { objectToUrlParams } from '../helpers/base';\nimport { log } from './logging.service';\nexport default class BaseService {\n  constructor() {\n    this.MAIN_API = currentEnv().MAIN_API;\n\n    this.handleError = res => {\n      if (typeof res.error === 'string') return res;\n      const values = Object.values(res.error);\n      const keys = Object.keys(res.error);\n      const err = {\n        error: keys.map((key, i) => {\n          const message = Array.isArray(values[i]) ? values[i].join(', ') : Object.values(values[i]).join(', ');\n          return key + ': ' + message;\n        }).join('\\n')\n      };\n      log('Error in handleError method in BaseService', err);\n      return err;\n    };\n\n    this.handleResponseType = async res => {\n      const contentType = res.headers.get('content-type');\n\n      if (contentType && contentType.indexOf('application/json') !== -1) {\n        return await res.json();\n      } else {\n        log('Received type is not JSON but *: ', (await res.text()));\n        return null;\n      }\n    };\n\n    this.headers = () => {\n      return {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Headers': '*'\n      };\n    };\n\n    this.getJSON = async (url, params) => {\n      const res = await fetch(this.MAIN_API + url + `${objectToUrlParams(params)}`, {\n        method: 'GET',\n        headers: this.headers(),\n        credentials: 'include'\n      });\n      const response = await this.handleResponseType(res);\n\n      if (response && response.error) {\n        return this.handleError(response);\n      }\n\n      return response;\n    };\n\n    this.postJSON = async (url, data, saveCookie) => {\n      try {\n        const res = await fetch(this.MAIN_API + url, {\n          method: 'POST',\n          headers: this.headers(),\n          body: JSON.stringify(data),\n          credentials: 'include'\n        });\n\n        if (saveCookie) {\n          log(res);\n        }\n\n        const response = await this.handleResponseType(res);\n\n        if (response && response.error) {\n          return this.handleError(response);\n        }\n\n        return response;\n      } catch (e) {\n        log('Error doing postJSON in base.service.ts: ', e);\n        throw e;\n      }\n    };\n\n    this.patchJSON = async (url, data) => {\n      try {\n        const res = await fetch(this.MAIN_API + url, {\n          method: 'PATCH',\n          headers: this.headers(),\n          body: JSON.stringify(data),\n          credentials: 'include'\n        });\n        const response = await this.handleResponseType(res);\n\n        if (response && response.error && typeof response.error === 'object') {\n          return this.handleError(response);\n        }\n\n        return response;\n      } catch (e) {\n        log('Error doing patchJSON in base.service.ts: ', e);\n        throw e;\n      }\n    };\n\n    this.deleteJSON = async (url, data) => {\n      try {\n        const res = await fetch(this.MAIN_API + url, {\n          method: 'DELETE',\n          headers: this.headers(),\n          body: JSON.stringify(data),\n          credentials: 'include'\n        });\n        const response = await this.handleResponseType(res);\n\n        if (response && response.error && typeof response.error === 'object') {\n          return this.handleError(response);\n        }\n\n        return response;\n      } catch (e) {\n        log('Error doing patchJSON in base.service.ts: ', e);\n        throw e;\n      }\n    };\n\n    this.postFormData = async (url, data, method) => {\n      try {\n        const res = await fetch(this.MAIN_API + url, {\n          method: method || 'post',\n          credentials: 'include',\n          body: data\n        });\n        const response = await this.handleResponseType(res);\n\n        if (response && response.error) {\n          return this.handleError(response);\n        }\n\n        return response;\n      } catch (e) {\n        log('Error doing postFormData in base.service.ts: ', e);\n        throw e;\n      }\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/gilad/code/commitmuse/client/src/services/base.service.ts"],"names":["currentEnv","objectToUrlParams","log","BaseService","MAIN_API","handleError","res","error","values","Object","keys","err","map","key","i","message","Array","isArray","join","handleResponseType","contentType","headers","get","indexOf","json","text","getJSON","url","params","fetch","method","credentials","response","postJSON","data","saveCookie","body","JSON","stringify","e","patchJSON","deleteJSON","postFormData"],"mappings":"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","sourcesContent":["import currentEnv from '../config/environment'\nimport { objectToUrlParams } from '../helpers/base'\nimport { log } from './logging.service'\n\ntype PostAPIs = 'register' | 'login' | 'user' | 'isas' | 'plaid/items'\n\ntype PatchAPIs = 'register' | 'login' | 'user'\n\ntype GetAPIs = 'logout' | 'user' | 'check-auth' | string\n\nexport default class BaseService {\n  public MAIN_API = currentEnv().MAIN_API\n\n  private handleError = (res: { error: { any: string[] } | string }) => {\n    if (typeof res.error === 'string') return res\n    const values = Object.values(res.error)\n    const keys = Object.keys(res.error)\n    const err = {\n      error: keys\n        .map((key, i) => {\n          const message = Array.isArray(values[i]) ? values[i].join(', ') : Object.values(values[i]).join(', ')\n          return key + ': ' + message\n        })\n        .join('\\n'),\n    }\n    log('Error in handleError method in BaseService', err)\n    return err\n  }\n\n  // check if type of response is JSON\n  private handleResponseType = async (res: Response) => {\n    const contentType = res.headers.get('content-type')\n    if (contentType && contentType.indexOf('application/json') !== -1) {\n      return await res.json()\n    } else {\n      log('Received type is not JSON but *: ', await res.text())\n      return null\n    }\n  }\n\n  // define request headers\n  private headers = () => {\n    return {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Headers': '*',\n    }\n  }\n\n  getJSON = async (url: GetAPIs, params?: object) => {\n    const res = await fetch(this.MAIN_API + url + `${objectToUrlParams(params)}`, {\n      method: 'GET',\n      headers: this.headers(),\n      credentials: 'include',\n    })\n    const response = await this.handleResponseType(res)\n    if (response && response.error) {\n      return this.handleError(response)\n    }\n    return response\n  }\n\n  postJSON = async (url: PostAPIs, data: any, saveCookie?: boolean) => {\n    try {\n      const res = await fetch(this.MAIN_API + url, {\n        method: 'POST',\n        headers: this.headers(),\n        body: JSON.stringify(data),\n        credentials: 'include',\n      })\n\n      if (saveCookie) {\n        log(res)\n      }\n\n      const response = await this.handleResponseType(res)\n      if (response && response.error) {\n        return this.handleError(response)\n      }\n      return response\n    } catch (e) {\n      log('Error doing postJSON in base.service.ts: ', e)\n      throw e\n    }\n  }\n\n  patchJSON = async (url: PatchAPIs, data: any) => {\n    try {\n      const res = await fetch(this.MAIN_API + url, {\n        method: 'PATCH',\n        headers: this.headers(),\n        body: JSON.stringify(data),\n        credentials: 'include',\n      })\n      const response = await this.handleResponseType(res)\n      if (response && response.error && typeof response.error === 'object') {\n        return this.handleError(response)\n      }\n      return response\n    } catch (e) {\n      log('Error doing patchJSON in base.service.ts: ', e)\n      throw e\n    }\n  }\n\n  deleteJSON = async (url: string, data: any) => {\n    try {\n      const res = await fetch(this.MAIN_API + url, {\n        method: 'DELETE',\n        headers: this.headers(),\n        body: JSON.stringify(data),\n        credentials: 'include',\n      })\n      const response = await this.handleResponseType(res)\n      if (response && response.error && typeof response.error === 'object') {\n        return this.handleError(response)\n      }\n      return response\n    } catch (e) {\n      log('Error doing patchJSON in base.service.ts: ', e)\n      throw e\n    }\n  }\n\n  postFormData = async (url: string, data: FormData, method?: 'post' | 'patch') => {\n    try {\n      const res = await fetch(this.MAIN_API + url, {\n        method: method || 'post',\n        credentials: 'include',\n        body: data,\n      })\n      const response = await this.handleResponseType(res)\n      if (response && response.error) {\n        return this.handleError(response)\n      }\n      return response\n    } catch (e) {\n      log('Error doing postFormData in base.service.ts: ', e)\n      throw e\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}