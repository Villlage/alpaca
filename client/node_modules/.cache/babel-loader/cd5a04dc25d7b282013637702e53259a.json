{"ast":null,"code":"import _taggedTemplateLiteral from\"/Users/gilad/code/commitmuse/client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";function _templateObject(){var data=_taggedTemplateLiteral([\"\\n  // @ts-ignore\\n  background: \",\";\\n  color: \",\";\\n  :hover {\\n    // @ts-ignore\\n    background: \",\";\\n  }\\n\"]);_templateObject=function _templateObject(){return data;};return data;}import*as React from'react';import styled from'styled-components';import{SYSTEM_COLORS}from'../../../constants/system';import{fixClass}from'../../../helpers/base';import'./style.scss';import Icon from'../Icon';var Btn=styled.button(_templateObject(),function(props){return SYSTEM_COLORS[props.background];},function(props){return props.color||'white';},function(props){return SYSTEM_COLORS[props.background.replace('Main','Hover')];});export default function Button(props){return/*#__PURE__*/React.createElement(Btn,{className:\"Button-component\".concat(fixClass(props.className)),style:props.style,onClick:props.onClick,disabled:props.disabled||props.loading,background:props.background||'MainPrimary',color:['MainLight','MainWhite'].includes(props.background||'')?SYSTEM_COLORS.Title:props.color},props.loading?/*#__PURE__*/React.createElement(Loader,null):/*#__PURE__*/React.createElement(React.Fragment,null,props.children,\" \",props.icon&&/*#__PURE__*/React.createElement(Icon,{icon:props.icon,style:{marginLeft:6}})));}var Loader=function Loader(){return/*#__PURE__*/React.createElement(\"div\",{className:\"lds-ring\"},/*#__PURE__*/React.createElement(\"div\",null),/*#__PURE__*/React.createElement(\"div\",null),/*#__PURE__*/React.createElement(\"div\",null),/*#__PURE__*/React.createElement(\"div\",null));};","map":{"version":3,"sources":["/Users/gilad/code/commitmuse/client/src/app/components/Button/index.tsx"],"names":["React","styled","SYSTEM_COLORS","fixClass","Icon","Btn","button","props","background","color","replace","Button","className","style","onClick","disabled","loading","includes","Title","children","icon","marginLeft","Loader"],"mappings":"6XAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CAEA,MAAOC,CAAAA,MAAP,KAAmB,mBAAnB,CACA,OAASC,aAAT,KAA8B,2BAA9B,CACA,OAASC,QAAT,KAAyB,uBAAzB,CACA,MAAO,cAAP,CACA,MAAOC,CAAAA,IAAP,KAAkC,SAAlC,CAEA,GAAMC,CAAAA,GAAG,CAAGJ,MAAM,CAACK,MAAV,mBAEO,SAAAC,KAAK,QAAIL,CAAAA,aAAa,CAACK,KAAK,CAACC,UAAP,CAAjB,EAFZ,CAGE,SAAAD,KAAK,QAAIA,CAAAA,KAAK,CAACE,KAAN,EAAe,OAAnB,EAHP,CAMS,SAAAF,KAAK,QAAIL,CAAAA,aAAa,CAACK,KAAK,CAACC,UAAN,CAAiBE,OAAjB,CAAyB,MAAzB,CAAiC,OAAjC,CAAD,CAAjB,EANd,CAAT,CAgCA,cAAe,SAASC,CAAAA,MAAT,CAAgBJ,KAAhB,CAAoC,CACjD,mBACE,oBAAC,GAAD,EACE,SAAS,2BAAqBJ,QAAQ,CAACI,KAAK,CAACK,SAAP,CAA7B,CADX,CAEE,KAAK,CAAEL,KAAK,CAACM,KAFf,CAGE,OAAO,CAAEN,KAAK,CAACO,OAHjB,CAIE,QAAQ,CAAEP,KAAK,CAACQ,QAAN,EAAkBR,KAAK,CAACS,OAJpC,CAKE,UAAU,CAAET,KAAK,CAACC,UAAN,EAAoB,aALlC,CAME,KAAK,CAAE,CAAC,WAAD,CAAc,WAAd,EAA2BS,QAA3B,CAAoCV,KAAK,CAACC,UAAN,EAAoB,EAAxD,EAA8DN,aAAa,CAACgB,KAA5E,CAAoFX,KAAK,CAACE,KANnG,EAQGF,KAAK,CAACS,OAAN,cACC,oBAAC,MAAD,MADD,cAGC,wCACGT,KAAK,CAACY,QADT,KACoBZ,KAAK,CAACa,IAAN,eAAc,oBAAC,IAAD,EAAM,IAAI,CAAEb,KAAK,CAACa,IAAlB,CAAwB,KAAK,CAAE,CAAEC,UAAU,CAAE,CAAd,CAA/B,EADlC,CAXJ,CADF,CAkBD,CAED,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,EAAM,CACnB,mBACE,2BAAK,SAAS,CAAC,UAAf,eACE,+BADF,cAEE,+BAFF,cAGE,+BAHF,cAIE,+BAJF,CADF,CAQD,CATD","sourcesContent":["import * as React from 'react'\nimport { CSSProperties } from 'react'\nimport styled from 'styled-components'\nimport { SYSTEM_COLORS } from '../../../constants/system'\nimport { fixClass } from '../../../helpers/base'\nimport './style.scss'\nimport Icon, { SystemIcons } from '../Icon'\n\nconst Btn = styled.button<any>`\n  // @ts-ignore\n  background: ${props => SYSTEM_COLORS[props.background]};\n  color: ${props => props.color || 'white'};\n  :hover {\n    // @ts-ignore\n    background: ${props => SYSTEM_COLORS[props.background.replace('Main', 'Hover')]};\n  }\n`\n\ntype ButtonBackground =\n  | 'MainPrimary'\n  | 'MainSecondary'\n  | 'MainSuccess'\n  | 'MainError'\n  | 'MainWarning'\n  | 'MainInfo'\n  | 'MainLight'\n  | 'MainWhite'\n\ninterface ButtonProps {\n  children: any\n  onClick?: any\n  className?: string\n  background?: ButtonBackground\n  color?: string\n  style?: CSSProperties\n  disabled?: boolean\n  loading?: boolean\n  icon?: SystemIcons\n}\n\nexport default function Button(props: ButtonProps) {\n  return (\n    <Btn\n      className={`Button-component${fixClass(props.className)}`}\n      style={props.style}\n      onClick={props.onClick}\n      disabled={props.disabled || props.loading}\n      background={props.background || 'MainPrimary'}\n      color={['MainLight', 'MainWhite'].includes(props.background || '') ? SYSTEM_COLORS.Title : props.color}\n    >\n      {props.loading ? (\n        <Loader />\n      ) : (\n        <>\n          {props.children} {props.icon && <Icon icon={props.icon} style={{ marginLeft: 6 }} />}\n        </>\n      )}\n    </Btn>\n  )\n}\n\nconst Loader = () => {\n  return (\n    <div className=\"lds-ring\">\n      <div />\n      <div />\n      <div />\n      <div />\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}