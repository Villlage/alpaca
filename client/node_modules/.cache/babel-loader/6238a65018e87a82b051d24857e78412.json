{"ast":null,"code":"var _jsxFileName = \"/Users/gilad/code/commitmuse/client/src/app/components/CircularProgressbar/Path.tsx\";\nimport * as React from 'react';\nimport { VIEWBOX_CENTER_X, VIEWBOX_CENTER_Y } from './constants';\n\nfunction Path({\n  className,\n  counterClockwise,\n  dashRatio,\n  pathRadius,\n  strokeWidth,\n  style\n}) {\n  return /*#__PURE__*/React.createElement(\"path\", {\n    className: className,\n    style: Object.assign({}, style, getDashStyle({\n      pathRadius,\n      dashRatio,\n      counterClockwise\n    })),\n    d: getPathDescription({\n      pathRadius,\n      counterClockwise\n    }),\n    strokeWidth: strokeWidth,\n    fillOpacity: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  });\n} // SVG path description specifies how the path should be drawn\n\n\nfunction getPathDescription({\n  pathRadius,\n  counterClockwise\n}) {\n  const radius = pathRadius;\n  const rotation = counterClockwise ? 1 : 0; // Move to center of canvas\n  // Relative move to top canvas\n  // Relative arc to bottom of canvas\n  // Relative arc to top of canvas\n\n  return `\n      M ${VIEWBOX_CENTER_X},${VIEWBOX_CENTER_Y}\n      m 0,-${radius}\n      a ${radius},${radius} ${rotation} 1 1 0,${2 * radius}\n      a ${radius},${radius} ${rotation} 1 1 0,-${2 * radius}\n    `;\n}\n\nfunction getDashStyle({\n  counterClockwise,\n  dashRatio,\n  pathRadius\n}) {\n  const diameter = Math.PI * 2 * pathRadius;\n  const gapLength = (1 - dashRatio) * diameter;\n  return {\n    // Have dash be full diameter, and gap be full diameter\n    strokeDasharray: `${diameter}px ${diameter}px`,\n    // Shift dash backward by gapLength, so gap starts appearing at correct distance\n    strokeDashoffset: `${counterClockwise ? -gapLength : gapLength}px`\n  };\n}\n\nexport default Path;","map":{"version":3,"sources":["/Users/gilad/code/commitmuse/client/src/app/components/CircularProgressbar/Path.tsx"],"names":["React","VIEWBOX_CENTER_X","VIEWBOX_CENTER_Y","Path","className","counterClockwise","dashRatio","pathRadius","strokeWidth","style","Object","assign","getDashStyle","getPathDescription","radius","rotation","diameter","Math","PI","gapLength","strokeDasharray","strokeDashoffset"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,gBAAT,EAA2BC,gBAA3B,QAAmD,aAAnD;;AAEA,SAASC,IAAT,CAAc;AACZC,EAAAA,SADY;AAEZC,EAAAA,gBAFY;AAGZC,EAAAA,SAHY;AAIZC,EAAAA,UAJY;AAKZC,EAAAA,WALY;AAMZC,EAAAA;AANY,CAAd,EAcG;AACD,sBACE;AACE,IAAA,SAAS,EAAEL,SADb;AAEE,IAAA,KAAK,EAAEM,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,KAAlB,EAAyBG,YAAY,CAAC;AAAEL,MAAAA,UAAF;AAAcD,MAAAA,SAAd;AAAyBD,MAAAA;AAAzB,KAAD,CAArC,CAFT;AAGE,IAAA,CAAC,EAAEQ,kBAAkB,CAAC;AACpBN,MAAAA,UADoB;AAEpBF,MAAAA;AAFoB,KAAD,CAHvB;AAOE,IAAA,WAAW,EAAEG,WAPf;AAQE,IAAA,WAAW,EAAE,CARf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAYD,C,CAED;;;AACA,SAASK,kBAAT,CAA4B;AAAEN,EAAAA,UAAF;AAAcF,EAAAA;AAAd,CAA5B,EAAiH;AAC/G,QAAMS,MAAM,GAAGP,UAAf;AACA,QAAMQ,QAAQ,GAAGV,gBAAgB,GAAG,CAAH,GAAO,CAAxC,CAF+G,CAI/G;AACA;AACA;AACA;;AACA,SAAQ;UACAJ,gBAAiB,IAAGC,gBAAiB;aAClCY,MAAO;UACVA,MAAO,IAAGA,MAAO,IAAGC,QAAS,UAAS,IAAID,MAAO;UACjDA,MAAO,IAAGA,MAAO,IAAGC,QAAS,WAAU,IAAID,MAAO;KAJ1D;AAMD;;AAED,SAASF,YAAT,CAAsB;AACpBP,EAAAA,gBADoB;AAEpBC,EAAAA,SAFoB;AAGpBC,EAAAA;AAHoB,CAAtB,EAQG;AACD,QAAMS,QAAQ,GAAGC,IAAI,CAACC,EAAL,GAAU,CAAV,GAAcX,UAA/B;AACA,QAAMY,SAAS,GAAG,CAAC,IAAIb,SAAL,IAAkBU,QAApC;AAEA,SAAO;AACL;AACAI,IAAAA,eAAe,EAAG,GAAEJ,QAAS,MAAKA,QAAS,IAFtC;AAGL;AACAK,IAAAA,gBAAgB,EAAG,GAAEhB,gBAAgB,GAAG,CAACc,SAAJ,GAAgBA,SAAU;AAJ1D,GAAP;AAMD;;AAED,eAAehB,IAAf","sourcesContent":["import * as React from 'react'\nimport { VIEWBOX_CENTER_X, VIEWBOX_CENTER_Y } from './constants'\n\nfunction Path({\n  className,\n  counterClockwise,\n  dashRatio,\n  pathRadius,\n  strokeWidth,\n  style,\n}: {\n  className?: string\n  counterClockwise: boolean\n  dashRatio: number\n  pathRadius: number\n  strokeWidth: number\n  style?: object\n}) {\n  return (\n    <path\n      className={className}\n      style={Object.assign({}, style, getDashStyle({ pathRadius, dashRatio, counterClockwise }))}\n      d={getPathDescription({\n        pathRadius,\n        counterClockwise,\n      })}\n      strokeWidth={strokeWidth}\n      fillOpacity={0}\n    />\n  )\n}\n\n// SVG path description specifies how the path should be drawn\nfunction getPathDescription({ pathRadius, counterClockwise }: { pathRadius: number; counterClockwise: boolean }) {\n  const radius = pathRadius\n  const rotation = counterClockwise ? 1 : 0\n\n  // Move to center of canvas\n  // Relative move to top canvas\n  // Relative arc to bottom of canvas\n  // Relative arc to top of canvas\n  return `\n      M ${VIEWBOX_CENTER_X},${VIEWBOX_CENTER_Y}\n      m 0,-${radius}\n      a ${radius},${radius} ${rotation} 1 1 0,${2 * radius}\n      a ${radius},${radius} ${rotation} 1 1 0,-${2 * radius}\n    `\n}\n\nfunction getDashStyle({\n  counterClockwise,\n  dashRatio,\n  pathRadius,\n}: {\n  counterClockwise: boolean\n  dashRatio: number\n  pathRadius: number\n}) {\n  const diameter = Math.PI * 2 * pathRadius\n  const gapLength = (1 - dashRatio) * diameter\n\n  return {\n    // Have dash be full diameter, and gap be full diameter\n    strokeDasharray: `${diameter}px ${diameter}px`,\n    // Shift dash backward by gapLength, so gap starts appearing at correct distance\n    strokeDashoffset: `${counterClockwise ? -gapLength : gapLength}px`,\n  }\n}\n\nexport default Path\n"]},"metadata":{},"sourceType":"module"}