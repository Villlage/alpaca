{"ast":null,"code":"import _slicedToArray from\"/Users/gilad/code/commitmuse/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import'./style.scss';import Icon from'../Icon';import{fixClass}from'../../../helpers/base';export default function ExpansionPanel(props){var _useState=useState(props.isOpen||false),_useState2=_slicedToArray(_useState,2),isOpen=_useState2[0],set_isOpen=_useState2[1];return/*#__PURE__*/React.createElement(\"section\",{className:\"ExpansionPanel-component\"},/*#__PURE__*/React.createElement(\"div\",{className:\"question\".concat(fixClass(isOpen&&'is-open')),onClick:function onClick(){return set_isOpen(!isOpen);}},/*#__PURE__*/React.createElement(Icon,{icon:\"chevron-right\"}),/*#__PURE__*/React.createElement(\"h2\",null,props.title)),/*#__PURE__*/React.createElement(\"div\",{className:\"answer\".concat(fixClass(isOpen&&'is-open'))},props.content));}","map":{"version":3,"sources":["/Users/gilad/code/commitmuse/client/src/app/components/ExpansionPanel/index.tsx"],"names":["React","useState","Icon","fixClass","ExpansionPanel","props","isOpen","set_isOpen","title","content"],"mappings":"sHAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,MAAO,cAAP,CACA,MAAOC,CAAAA,IAAP,KAAiB,SAAjB,CACA,OAASC,QAAT,KAAyB,uBAAzB,CAQA,cAAe,SAASC,CAAAA,cAAT,CAAwBC,KAAxB,CAAoD,eACpCJ,QAAQ,CAACI,KAAK,CAACC,MAAN,EAAgB,KAAjB,CAD4B,wCAC1DA,MAD0D,eAClDC,UADkD,eAEjE,mBACE,+BAAS,SAAS,CAAC,0BAAnB,eACE,2BAAK,SAAS,mBAAaJ,QAAQ,CAACG,MAAM,EAAI,SAAX,CAArB,CAAd,CAA4D,OAAO,CAAE,yBAAMC,CAAAA,UAAU,CAAC,CAACD,MAAF,CAAhB,EAArE,eACE,oBAAC,IAAD,EAAM,IAAI,CAAC,eAAX,EADF,cAEE,8BAAKD,KAAK,CAACG,KAAX,CAFF,CADF,cAKE,2BAAK,SAAS,iBAAWL,QAAQ,CAACG,MAAM,EAAI,SAAX,CAAnB,CAAd,EAA2DD,KAAK,CAACI,OAAjE,CALF,CADF,CASD","sourcesContent":["import React, { useState } from 'react'\nimport './style.scss'\nimport Icon from '../Icon'\nimport { fixClass } from '../../../helpers/base'\n\ninterface ExpansionPanelProps {\n  title: string\n  content: any\n  isOpen?: boolean\n}\n\nexport default function ExpansionPanel(props: ExpansionPanelProps) {\n  const [isOpen, set_isOpen] = useState(props.isOpen || false)\n  return (\n    <section className=\"ExpansionPanel-component\">\n      <div className={`question${fixClass(isOpen && 'is-open')}`} onClick={() => set_isOpen(!isOpen)}>\n        <Icon icon=\"chevron-right\" />\n        <h2>{props.title}</h2>\n      </div>\n      <div className={`answer${fixClass(isOpen && 'is-open')}`}>{props.content}</div>\n    </section>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}