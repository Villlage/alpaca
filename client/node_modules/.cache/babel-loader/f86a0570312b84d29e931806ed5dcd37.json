{"ast":null,"code":"import*as React from'react';import{VIEWBOX_CENTER_X,VIEWBOX_CENTER_Y}from'./constants';function Path(_ref){var className=_ref.className,counterClockwise=_ref.counterClockwise,dashRatio=_ref.dashRatio,pathRadius=_ref.pathRadius,strokeWidth=_ref.strokeWidth,style=_ref.style;return/*#__PURE__*/React.createElement(\"path\",{className:className,style:Object.assign({},style,getDashStyle({pathRadius:pathRadius,dashRatio:dashRatio,counterClockwise:counterClockwise})),d:getPathDescription({pathRadius:pathRadius,counterClockwise:counterClockwise}),strokeWidth:strokeWidth,fillOpacity:0});}// SVG path description specifies how the path should be drawn\nfunction getPathDescription(_ref2){var pathRadius=_ref2.pathRadius,counterClockwise=_ref2.counterClockwise;var radius=pathRadius;var rotation=counterClockwise?1:0;// Move to center of canvas\n// Relative move to top canvas\n// Relative arc to bottom of canvas\n// Relative arc to top of canvas\nreturn\"\\n      M \".concat(VIEWBOX_CENTER_X,\",\").concat(VIEWBOX_CENTER_Y,\"\\n      m 0,-\").concat(radius,\"\\n      a \").concat(radius,\",\").concat(radius,\" \").concat(rotation,\" 1 1 0,\").concat(2*radius,\"\\n      a \").concat(radius,\",\").concat(radius,\" \").concat(rotation,\" 1 1 0,-\").concat(2*radius,\"\\n    \");}function getDashStyle(_ref3){var counterClockwise=_ref3.counterClockwise,dashRatio=_ref3.dashRatio,pathRadius=_ref3.pathRadius;var diameter=Math.PI*2*pathRadius;var gapLength=(1-dashRatio)*diameter;return{// Have dash be full diameter, and gap be full diameter\nstrokeDasharray:\"\".concat(diameter,\"px \").concat(diameter,\"px\"),// Shift dash backward by gapLength, so gap starts appearing at correct distance\nstrokeDashoffset:\"\".concat(counterClockwise?-gapLength:gapLength,\"px\")};}export default Path;","map":{"version":3,"sources":["/Users/gilad/code/commitmuse/client/src/app/components/CircularProgressbar/Path.tsx"],"names":["React","VIEWBOX_CENTER_X","VIEWBOX_CENTER_Y","Path","className","counterClockwise","dashRatio","pathRadius","strokeWidth","style","Object","assign","getDashStyle","getPathDescription","radius","rotation","diameter","Math","PI","gapLength","strokeDasharray","strokeDashoffset"],"mappings":"AAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CACA,OAASC,gBAAT,CAA2BC,gBAA3B,KAAmD,aAAnD,CAEA,QAASC,CAAAA,IAAT,MAcG,IAbDC,CAAAA,SAaC,MAbDA,SAaC,CAZDC,gBAYC,MAZDA,gBAYC,CAXDC,SAWC,MAXDA,SAWC,CAVDC,UAUC,MAVDA,UAUC,CATDC,WASC,MATDA,WASC,CARDC,KAQC,MARDA,KAQC,CACD,mBACE,4BACE,SAAS,CAAEL,SADb,CAEE,KAAK,CAAEM,MAAM,CAACC,MAAP,CAAc,EAAd,CAAkBF,KAAlB,CAAyBG,YAAY,CAAC,CAAEL,UAAU,CAAVA,UAAF,CAAcD,SAAS,CAATA,SAAd,CAAyBD,gBAAgB,CAAhBA,gBAAzB,CAAD,CAArC,CAFT,CAGE,CAAC,CAAEQ,kBAAkB,CAAC,CACpBN,UAAU,CAAVA,UADoB,CAEpBF,gBAAgB,CAAhBA,gBAFoB,CAAD,CAHvB,CAOE,WAAW,CAAEG,WAPf,CAQE,WAAW,CAAE,CARf,EADF,CAYD,CAED;AACA,QAASK,CAAAA,kBAAT,OAAiH,IAAnFN,CAAAA,UAAmF,OAAnFA,UAAmF,CAAvEF,gBAAuE,OAAvEA,gBAAuE,CAC/G,GAAMS,CAAAA,MAAM,CAAGP,UAAf,CACA,GAAMQ,CAAAA,QAAQ,CAAGV,gBAAgB,CAAG,CAAH,CAAO,CAAxC,CAEA;AACA;AACA;AACA;AACA,0BACQJ,gBADR,aAC4BC,gBAD5B,yBAEWY,MAFX,sBAGQA,MAHR,aAGkBA,MAHlB,aAG4BC,QAH5B,mBAG8C,EAAID,MAHlD,sBAIQA,MAJR,aAIkBA,MAJlB,aAI4BC,QAJ5B,oBAI+C,EAAID,MAJnD,WAMD,CAED,QAASF,CAAAA,YAAT,OAQG,IAPDP,CAAAA,gBAOC,OAPDA,gBAOC,CANDC,SAMC,OANDA,SAMC,CALDC,UAKC,OALDA,UAKC,CACD,GAAMS,CAAAA,QAAQ,CAAGC,IAAI,CAACC,EAAL,CAAU,CAAV,CAAcX,UAA/B,CACA,GAAMY,CAAAA,SAAS,CAAG,CAAC,EAAIb,SAAL,EAAkBU,QAApC,CAEA,MAAO,CACL;AACAI,eAAe,WAAKJ,QAAL,eAAmBA,QAAnB,MAFV,CAGL;AACAK,gBAAgB,WAAKhB,gBAAgB,CAAG,CAACc,SAAJ,CAAgBA,SAArC,MAJX,CAAP,CAMD,CAED,cAAehB,CAAAA,IAAf","sourcesContent":["import * as React from 'react'\nimport { VIEWBOX_CENTER_X, VIEWBOX_CENTER_Y } from './constants'\n\nfunction Path({\n  className,\n  counterClockwise,\n  dashRatio,\n  pathRadius,\n  strokeWidth,\n  style,\n}: {\n  className?: string\n  counterClockwise: boolean\n  dashRatio: number\n  pathRadius: number\n  strokeWidth: number\n  style?: object\n}) {\n  return (\n    <path\n      className={className}\n      style={Object.assign({}, style, getDashStyle({ pathRadius, dashRatio, counterClockwise }))}\n      d={getPathDescription({\n        pathRadius,\n        counterClockwise,\n      })}\n      strokeWidth={strokeWidth}\n      fillOpacity={0}\n    />\n  )\n}\n\n// SVG path description specifies how the path should be drawn\nfunction getPathDescription({ pathRadius, counterClockwise }: { pathRadius: number; counterClockwise: boolean }) {\n  const radius = pathRadius\n  const rotation = counterClockwise ? 1 : 0\n\n  // Move to center of canvas\n  // Relative move to top canvas\n  // Relative arc to bottom of canvas\n  // Relative arc to top of canvas\n  return `\n      M ${VIEWBOX_CENTER_X},${VIEWBOX_CENTER_Y}\n      m 0,-${radius}\n      a ${radius},${radius} ${rotation} 1 1 0,${2 * radius}\n      a ${radius},${radius} ${rotation} 1 1 0,-${2 * radius}\n    `\n}\n\nfunction getDashStyle({\n  counterClockwise,\n  dashRatio,\n  pathRadius,\n}: {\n  counterClockwise: boolean\n  dashRatio: number\n  pathRadius: number\n}) {\n  const diameter = Math.PI * 2 * pathRadius\n  const gapLength = (1 - dashRatio) * diameter\n\n  return {\n    // Have dash be full diameter, and gap be full diameter\n    strokeDasharray: `${diameter}px ${diameter}px`,\n    // Shift dash backward by gapLength, so gap starts appearing at correct distance\n    strokeDashoffset: `${counterClockwise ? -gapLength : gapLength}px`,\n  }\n}\n\nexport default Path\n"]},"metadata":{},"sourceType":"module"}